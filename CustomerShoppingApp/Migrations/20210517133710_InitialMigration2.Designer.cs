// <auto-generated />
using System;
using CustomerShoppingApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CustomerShoppingApp.Migrations
{
    [DbContext(typeof(CustomerShoppingCartContext))]
    [Migration("20210517133710_InitialMigration2")]
    partial class InitialMigration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CustomerShoppingApp.Models.Address", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("Customerid")
                        .HasColumnType("int");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<int>("houseNumber")
                        .HasColumnType("int");

                    b.Property<string>("postCode")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("id");

                    b.HasIndex("Customerid");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.BankDetail", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("accountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("bankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("sortCode")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.HasKey("id");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Cloth", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("brand")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("clothType")
                        .HasColumnType("varchar(12)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<float>("size")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("Cloth");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Customer", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("age")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<int?>("bankDetailid")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("firstName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.HasKey("id");

                    b.HasIndex("bankDetailid");

                    b.ToTable("Customer", "Users");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Furniture", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("colour")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("furnitureName")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<string>("material")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("Furniture");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Garden", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("plantName")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(5,2)");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("Garden");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Item", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int?>("clothid")
                        .HasColumnType("int");

                    b.Property<int?>("furnitureid")
                        .HasColumnType("int");

                    b.Property<int?>("gardenid")
                        .HasColumnType("int");

                    b.Property<int?>("shoeid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ShoppingCartId")
                        .IsUnique();

                    b.HasIndex("clothid");

                    b.HasIndex("furnitureid");

                    b.HasIndex("gardenid");

                    b.HasIndex("shoeid");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Shoe", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("brand")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("colour")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(5,2)");

                    b.Property<float>("size")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("Shoe");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.ShoppingCart", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("shoppingCartName")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.HasKey("id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ShoppingCart", "Basket");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Address", b =>
                {
                    b.HasOne("CustomerShoppingApp.Models.Customer", null)
                        .WithMany("address")
                        .HasForeignKey("Customerid");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Customer", b =>
                {
                    b.HasOne("CustomerShoppingApp.Models.BankDetail", "bankDetail")
                        .WithMany()
                        .HasForeignKey("bankDetailid");

                    b.Navigation("bankDetail");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Item", b =>
                {
                    b.HasOne("CustomerShoppingApp.Models.ShoppingCart", null)
                        .WithOne("item")
                        .HasForeignKey("CustomerShoppingApp.Models.Item", "ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerShoppingApp.Models.Cloth", "cloth")
                        .WithMany()
                        .HasForeignKey("clothid");

                    b.HasOne("CustomerShoppingApp.Models.Furniture", "furniture")
                        .WithMany()
                        .HasForeignKey("furnitureid");

                    b.HasOne("CustomerShoppingApp.Models.Garden", "garden")
                        .WithMany()
                        .HasForeignKey("gardenid");

                    b.HasOne("CustomerShoppingApp.Models.Shoe", "shoe")
                        .WithMany()
                        .HasForeignKey("shoeid");

                    b.Navigation("cloth");

                    b.Navigation("furniture");

                    b.Navigation("garden");

                    b.Navigation("shoe");
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.ShoppingCart", b =>
                {
                    b.HasOne("CustomerShoppingApp.Models.Customer", null)
                        .WithOne("shoppingCart")
                        .HasForeignKey("CustomerShoppingApp.Models.ShoppingCart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.Customer", b =>
                {
                    b.Navigation("address");

                    b.Navigation("shoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerShoppingApp.Models.ShoppingCart", b =>
                {
                    b.Navigation("item")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
